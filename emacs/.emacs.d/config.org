#+TITLE: Emacs Configuration
#+AUTHOR: Adam Evans
#+EMAIL: adam@agileand.me
#+OPTIONS: toc:3 num:nil ^:nil
#+PROPERTY: header-args :results silent

* Overview
My Emacs configuration. This configuration uses a literate programming style using [[http://orgmode.org/worg/org-contrib/babel/][Babel]] and [[https://orgmode.org][Org mode]] driven by the following =init.el=.

#+begin_example
(org-babel-load-file
  (expand-file-name "config.org" user-emacs-directory))
#+end_example

* Initialization
Firstly disable the menu and toolbar at the start of the file to prevent them being shown during startup then being hidden, this helps with perceived load time.

** Disable / hide the menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** Disable / hide the tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** Disable / hide the scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Package repository setup
Configure the package repositories to use. Repositories are set to use TLS/SSL instead of plain HTTP used by default.

Make sure we validate SSL certs so we trust the source
#+BEGIN_SRC emacs-lisp
(setq tls-checktrust t)
#+END_SRC

Set the repository list to use the https locations.
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq
  package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                    ("melpa" . "https://melpa.org/packages/")
                    ("melpa-stable" . "https://stable.melpa.org/packages/"))
  package-archive-priorities '(("melpa-stable" . 1)))
#+END_SRC

** Configuration and package load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/conf.d")
#+END_SRC

** Initialize the package list
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

This seeds the package list the first time Emacs is started
#+BEGIN_SRC emacs-lisp
(when (not package-archive-contents)
  (package-refresh-contents))
#+END_SRC

** Install use package
[[https://github.com/jwiegley/use-package][use-package]] is the basis for the rest of the package installation and configuration.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Package installation and configuration
** General packages
*** ace-window
[[https://github.com/abo-abo/ace-window][ace-window]] allows easy navigation between buffers and windows with =M-o= key.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window))
#+END_SRC

*** avy
[[https://github.com/abo-abo/avy][avy]] allows to quickly navigation to any visible text using =C-c SPC=.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :init
  (global-set-key (kbd "C-c SPC") 'avy-goto-char))
#+END_SRC

*** company
[[https://company-mode.github.io/][company]] is a text completion framework for Emacs. The name stands for "complete anything".

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode))
#+END_SRC

*** counsel-projectile
[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] integrate Projectile with the ivy completion system.

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :pin melpa
  :after projectile
  :init
  (counsel-projectile-mode))
#+END_SRC
*** evil
[[https://github.com/emacs-evil/evil][evil]] is an Emacs package for using VIM keybindings. Specific states are set for modes which do not play nice with evil in the =:init= section.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration nil)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
  )
#+END_SRC

Load additional evil integrations
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

*** evil-nerd-commenter
[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] is an evil extension for efficient line commenting. E.g. to comment out 5 lines: =M-5 ;=

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :after evil
  :init
  (evilnc-default-hotkeys))
#+END_SRC

*** exec-path-from-shell
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] fixes issues when using the Emacs GUI on OSX where it does not inherit the $PATH variable and fails to run shell commands.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if(memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-copy-env "NIX_PATH")
  (exec-path-from-shell-initialize))
#+END_SRC

*** flyspell-popup
[[https://github.com/xuchunyang/flyspell-popup][flyspell-popup]] correct misspelled words in a popup menu.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-popup
  :ensure t
  :bind (:map flyspell-mode-map
        ("C-;" . flyspell-popup-correct))
  :init
  (add-hook 'flyspell-mode-hook 'flyspell-popup-auto-correct-mode))
#+END_SRC

*** ivy
[[https://github.com/abo-abo/swiper][ivy]] is a generic completion front-end for Emacs. It comes with *Counsel* a collection of Ivy enhanced versions of Common Emacs commands and *Swiper* an Ivy enhanced alternative isearch.

~ivy-use-selectable-prompt~ sets your current input to be selectable as a candidate. Press ~C-p~ when you're on the first candidate to select your input instead.

This solves the long standing issue of e.g. creating a file or a directory foo when a file foobar already exists. Previously, the only solution was to use ~C-M-j~. It's still available, but now you can also select your input with C-p and press RET.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :pin melpa
  :bind (("M-x" . counsel-M-x)
         ("C-s" . swiper)
         ("C-x b" . ivy-switch-buffer))
 :config
 (setq ivy-use-virtual-buffers t
       ivy-count-format "%d/%d "
       ivy-height 10
       ivt-use-selectable-prompt t))
#+END_SRC

*** linum-relative
[[https://github.com/coldnew/linum-relative][linum-relative]] displays Vim style line numbers relative to the current line in a buffer making Vim navigation style navigation easier when using evil mode.

#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :init
  (setq linum-relative-current-symbol "")
  (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

*** org-bullets
[[f][org-bullets]] mode. Show org-mode bullets as UTF-8 characters. This makes the UI look cleaner imho.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** projectile
[[https://github.com/bbatsov/projectile][projectile]] treat git/svn/... repositories as projects allowing easy navigation.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-global-mode 1)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+END_SRC

*** smex
[[https://github.com/nonsequitur/smex][smex]] a smart =M-x= enhancement which sorts items by recently used. Ivy/Counsel automatically integrate with Smex.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t)
#+END_SRC

*** which-key
[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in a popup. I.e if use =M-x= and wait one second.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key
  :config
  (which-key-mode))
#+END_SRC

*** writegood-mode
[[https://github.com/bnbeckwith/writegood-mode][writegood mode]] is a minor mode to aid in finding common writing problems.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :ensure t)
#+END_SRC

*** zygospore
[[https://github.com/LouisKottmann/zygospore.el][zygospore]] allows for quickly zooming in to a buffer and zooming out again using =C-x 1=.

#+BEGIN_SRC emacs-lisp
(use-package zygospore
  :ensure t
  :init
  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows))
#+END_SRC

** Programming and development packages
*** autopair
[[https://github.com/joaotavora/autopair][autopair]] enable =()=, =[]= ={}= closing braces as soon as typed.

#+BEGIN_SRC emacs-lisp
(use-package autopair
  :ensure t
  :init
  (autopair-global-mode))
#+END_SRC

*** Docker support
[[https://github.com/meqif/docker-compose-mode][docker-compose-mode]] is a major mode for editing Docker compose files.

#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
  :ensure t)
#+END_SRC

[[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] add syntax highlighting for dockerfiles and the ability tp build in buffer using =C-c C-b=.

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC

*** flymd
[[https://github.com/mola-T/flymd][flymd]], preview markdown in a your web browser by running =flymd-flyit=. flymd starts a local web server continuously rendering edited markdown files.

#+BEGIN_SRC emacs-lisp
(use-package flymd
  :ensure t)
#+END_SRC

*** haskell
For Haskell development I use [[https://github.com/jyp/dante][dante]].

#+BEGIN_SRC emacs-lisp
;; (use-package dante
;;   :ensure t
;;   :after haskell-mode
;;   :commands 'dante-mode
;;   :init
;;   (add-hook 'haskell-mode-hook 'flycheck-mode)
;;   (add-hook 'haskell-mode-hook 'dante-mode))
#+END_SRC

*** magit
[[https://magit.vc/][magit]] is an Emacs based git client.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (setq magit-auto-revert-mode nil)
  (setq magit-last-seen-setup-instructions "1.4.0")
  (add-hook 'comment-mode-hook 'flyspell-prog-mode))
#+END_SRC

*** markdown-mode
[[https://jblevins.org/projects/markdown-mode/][mardown-mode]] for working with Markdown files. Automatically enable spell checking and [[https://github.com/bnbeckwith/writegood-mode][writegood-mode]] which highlights text based on a set of weasel-words, passive-voice and duplicate words.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-hook 'markdown-mode-hook
            (lambda ()
              (writegood-mode t)
              (flyspell-mode t))))
#+END_SRC

*** nix-mode
[[https://github.com/NixOS/nix-mode][nix-mode]] a major mode for editing Nix expressions

#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+END_SRC

*** nix-sandbox
[[https://github.com/travisbhartwell/nix-emacs][nix-sandbox]] Utility functions to work with nix sandboxes.

#+BEGIN_SRC emacs-lisp
(use-package nix-sandbox
  :ensure t)
#+END_SRC

*** restclient
[[https://github.com/pashky/restclient.el][rest-client]] HTTP REST client for Emacs for testing web services. Supports pretty-printed JSON and XML response formatting.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t)
#+END_SRC

*** scala
The below Scala integration for Emacs is based on the latest [[http://ensime.org/][Ensime]] unstable builds, see [[http://ensime.org/editors/emacs/install/][Unstable Edition]]. Ensime is also configured to integrate with Ivy completion framework.

#+BEGIN_SRC emacs-lisp
(use-package ensime
 :ensure t
 :pin melpa
 :init
 (setq ensime-completion-style 'company
       ensime-startup-notification nil
       ensime-startup-snapshot-notification nil
       ensime-startup-snapshot-notification-3 nil
       ensime-search-interface 'ivy))

(use-package sbt-mode
  :ensure t
  :pin melpa)

(use-package scala-mode
  :ensure t
  :pin melpa)
#+END_SRC

*** ws-butler
[[https://github.com/lewang/ws-butler][ws-butler]] Unobtrusively trim extraneous white-space when files are saved.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC

*** yaml-mode
[[https://github.com/yoshiki/yaml-mode][yaml-mode]] is a simple major mode for editing YAML files.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.yaml\\'" "\\.yml\\'")
#+END_SRC

*** yassnippet
[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet.

Snippets can be found at [[https://github.com/AndreaCrotti/yasnippet-snippets/tree/]]. Add these to =~/.emacs.d/yasnippet= folder as required.

=SPC= is used as the expansion character. This prevents interference with Ensime's =TAB= control key

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  (define-key yas-minor-mode-map (kbd "<tab>") yas-maybe-expand)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "yasnippet")))
#+END_SRC

*** lsp-mode (Language Server Protocol Support for Emacs)
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  :hook (haskell-mode . lsp)
  :commands lsp)

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

(use-package helm-lsp
  :ensure t
  :commands helm-lsp-workspace-symbol)

(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)

(use-package lsp-haskell
  :ensure t
  :init
  (setq lsp-haskell-process-wrapper-function
    (lambda (args)
      (append
        (append (list "nix-shell" "-I" "." "--command" )
                (list (mapconcat 'identity args " ")))
        (list (nix-current-sandbox)))))
  :config
  (setq haskell-enable-hindent t
        haskell-completion-backend 'lsp
        haskell-process-type 'cabal-new-repl))

(use-package direnv
  :ensure t)
#+END_SRC

** Look and feel
*** all-the-icons
[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] required by spaceline-all-the-icons. Note you need to run =M-x all-the-icons-install-fonts= initially to install the font resources.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

*** darcula-theme
[[https://gitlab.com/fommil/emacs-darcula-theme][darcula-theme]] the InteliJ darcula-theme ported to Emacs.

#+BEGIN_SRC emacs-lisp
(use-package darcula-theme
  :ensure t
  :init
  (load-theme 'darcula t))
#+END_SRC

*** rainbow-mode
[[https://julien.danjou.info/projects/emacs-packages#rainbow-mode][rainbow-mode]] is a minor mode for changing the text background on hex based colour strings to preview them

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

*** spaceline-all-the-icons
[[https://github.com/domtronn/spaceline-all-the-icons.el][spaceline-all-the-icons]] Discrete minimal mode line
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :init
  :config
  (setq spaceline-highlight-face-fun 'spaceline-highlight-face-default)
  (set-face-attribute 'spaceline-highlight-face nil :foreground "#3c3f41" :background "#a9b7c6")
  (set-face-attribute 'powerline-active1 nil :foreground "#3c3f41" :background "#a9b7c6")
  (require 'spaceline-config))

(use-package spaceline-all-the-icons
  :after spaceline
  :config (progn
    (setq spaceline-all-the-icons-highlight-file-name nil
          spaceline-all-the-icons-hide-long-buffer-path nil
          spaceline-all-the-icons-icon-set-modified 'chain
          spaceline-all-the-icons-icon-set-window-numbering 'circle
          spaceline-all-the-icons-separator-type 'none
          spaceline-all-the-icons-primary-separator "")


    ;; Toggles
    (spaceline-toggle-evil-state-on)
    (spaceline-toggle-all-the-icons-buffer-size-off)
    (spaceline-toggle-all-the-icons-buffer-position-off)
    (spaceline-toggle-all-the-icons-vc-icon-off)
    (spaceline-toggle-all-the-icons-vc-status-on)
    (spaceline-toggle-all-the-icons-git-status-on)
    (spaceline-toggle-all-the-icons-flycheck-status-off)
    (spaceline-toggle-all-the-icons-time-off)
    (spaceline-toggle-all-the-icons-battery-status-off)
    (spaceline-toggle-all-the-icons-projectile-off)
    (spaceline-toggle-all-the-icons-hud-off)

    (setq evil-normal-state-tag   (propertize "<N>"  'face '((:background "#a6c52c" :height 0.8)))
          evil-emacs-state-tag    (propertize "<E>" 'face '((:background "#9876aa" :height 0.8)))
          evil-insert-state-tag   (propertize "<I>" 'face '((:background "#6897bb" :height 0.8)))
          evil-replace-state-tag  (propertize "<Replace>" 'face '((:background "dark orange" :height 0.8)))
          evil-motion-state-tag   (propertize "<Motion>" 'face '((:background "khaki" :height 0.8)))
          evil-visual-state-tag   (propertize "<V>" 'face '((:background "yellow" :height 0.8)))
          evil-operator-state-tag (propertize "<Operator>" 'face '((:background "sandy brown" :height 0.8))))

    ;; Initialization
    (spaceline-all-the-icons-theme 'evil-state)
))
#+END_SRC
** Other
*** Beancount
I use [[https://bitbucket.org/blais/beancount/commits/all][Beancount]] for plain text accounting. Beancount is a double-entry bookkeeping computer language that lets you define financial transaction records in a text file, read them in memory, generate a variety of reports from them, and provides a web interface.

For Emacs integration a minor mode is provided, this needs to be cloned from the BitBucket Mercuial repository.

Firstly checkout/clone the project, I use `~/Work` for all my Git/code projects.

#+BEGIN_SRC sh :tangle no
cd ~/Work
nix-shell -p mercurial
hg clone https://bitbucket.org/blais/beancount
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (file-directory-p "~/Work/beancount/editors/emacs")
  (add-to-list 'load-path "~/Work/beancount/editors/emacs")
  (load "beancount"))
#+END_SRC
*** mu4e
#+BEGIN_SRC emacs-lisp
(let ((path "~/.nix-profile/share/emacs/site-lisp/mu4e"))
  (when (file-directory-p path)
  (add-to-list 'load-path (file-truename (expand-file-name path)))
  (autoload 'mu4e "mu4e" "Launch mu4e and show the main window" t)
  (setq mu4e-maildir "~/Mail")))
#+END_SRC
* General settings
** custom-file
Emacs built in customization UI appends customizations in an unorganized mess at the bottom of the =init.el= file. The below snippet configures customizations to be placed in a separate file.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
#+END_SRC

** Flyspell spellchecking customizations
Prevents printing a message for every word in the buffer slowing it down.
#+BEGIN_SRC emacs-lisp
(setq flyspell-issue-message-flag nil)
#+END_SRC

Use [[http://aspell.net/][aspell]] for spell checking setting the preferred language to English.
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell"
      ispell-list-command "--list"
      ispell-extra-args '("--sug-mode=ultra" "--lang=en"))
#+END_SRC

Enable Flyspell spell checking in programming mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

Enable Flyspell spell checking in plain text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

** IDO customizations
[[https://www.emacswiki.org/emacs/InteractivelyDoThings#toc1][ido]] is part of Emacs and lets yo interactively do things with buffers and files.

Below are some general preferences
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t
      ido-everywhere t
      ido-create-new-buffer 'always
      ido-file-extensions-order '(".scala" "scala.html" "hs" ".less" ".js" ".css"))
#+END_SRC

Activate / ensure Ido mode is enabled
#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

** Indentation
Set the indentation to use spaces instead of tabs.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Keybinding customizations
Decrease and Increase text size using =C-+= and =C--= shortcut.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

Show =magit-status= shortcut.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Comment/un-comment region shortcut.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC

Fix the annoying home key taking you to start of file / end -> end of file.
#+BEGIN_SRC emacs-lisp
(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
#+END_SRC

Bind =C-SHIFT-f= to full screen matching default OSX functionality.
#+BEGIN_SRC emacs-lisp
(if(memq window-system '(mac ns))
    (global-set-key (kbd "C-S-f") 'toggle-frame-fullscreen))
#+END_SRC

Fix Microsoft Ergotouch keyboard mapping to match Macbook Pro's.
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'control))
#+END_SRC

** Miscellaneous tweaks
Reduce the frequency of garbage collection by making it happen on each 100MB of allocated data (the default is on every 0.76MB)
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
#+END_SRC

Warn when opening files bigger than 100MB
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

Disable the annoying bell ring
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Stop creating =#autosave#= files
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

Stop creating =~= lock files when editing
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

Stop creating =backup~= files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Auto update file in buffer if updated on disk
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
#+END_SRC

Save typing yes / no and use short y/n aliases
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't show the welcome to Emacs screen on startup.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Start with a empty scratch on startup.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC

Replace highlighted text on typing.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

Integrate with OS clipboard
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC
** Programming
Show unncessary whitespace that can mess up diffs
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
#+END_SRC

Make sure files have an empty blank line at the end for Git.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (interactive) (setq mode-require-final-newline t)))
#+END_SRC

** Org mode
Configure babel languages to support

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (plantuml . t)
    (scala . t)
    (shell . t)
    ))
#+END_SRC

Set the location for where Org looks for files to include in agendas and some other things.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/org")
#+END_SRC

Set the default notes file
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Documents/org/todo-list.org")
#+END_SRC

Bind =Ctrl-c c= to =org-capture=
#+BEGIN_SRC emacs-lisp
;;(define-key global-map "C-c c" 'org-capture) ;; TODO fix, conflicts with Avy
#+END_SRC

** Start Emacs server
Start the Emacs background server process so we can open text files from the command line in the Emacs GUI

#+BEGIN_EXAMPLE
emacsclient -n ~/.bashprofile
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

* Look and feel
** Fonts and text
Set the default font to [[https://adobe-fonts.github.io/source-code-pro/][Source Code Pro]]. Ensure it is installed, see the [[https://github.com/adobe-fonts/source-code-pro][installation instructions]] section.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Source Code Pro-14")
#+END_SRC

** Miscellaneous
Display coloumn numbers in the status bar
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

Turn on parenthesis match highlighting
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Highlight the current selected line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode -1)
(set-face-background 'hl-line "#424445")
#+END_SRC

** org-mode theme customization's
org-mode color/font customization's to make it easier browsing.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-code 'nil :foreground "#28def0")
(set-face-attribute 'org-block 'nil :foreground "#A9B7C6")
(set-face-attribute 'org-document-info-keyword 'nil :foreground "#808080")
(set-face-attribute 'org-document-info 'nil :foreground "#808080")
(set-face-attribute 'org-document-title 'nil :foreground "#808080" :weight 'normal)
(set-face-attribute 'org-level-1 'nil :foreground "#cc7832" :height 1.3)
(set-face-attribute 'org-level-2 'nil :foreground "#4e807d" :height 1.2)
(set-face-attribute 'org-level-3 'nil :foreground "#9876aa" :height 1.1)
(set-face-attribute 'org-level-4 'nil :foreground "#b1951d")
(set-face-attribute 'org-level-5 'nil :foreground "#4f97d7")
(set-face-attribute 'org-level-6 'nil :foreground "#2d9574")
(set-face-attribute 'org-level-7 'nil :foreground "#67b11d")
(set-face-attribute 'org-level-8 'nil :foreground "#b1951d")
(set-face-attribute 'org-link 'nil :underline t :foreground "#a5c25c")
(set-face-attribute 'org-meta-line 'nil :foreground "#808080")
(set-face-attribute 'org-special-keyword 'nil :foreground "#bc6ec5")
(set-face-attribute 'org-tag 'nil :foreground "#9f8766")
(set-face-attribute 'org-verbatim 'nil :foreground "#4f97d7")
#+END_SRC

Setting Colours (faces) for todo states to give clearer view of work
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
  '(("DONE" . "green")
   ("☛ TODO" . "yellow")
   ("⚑ WAITING" . "red")))
#+END_SRC

Fancy todo states. Ref https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '(
  (sequence "☛ TODO(t)" "|" "✔ DONE(d)")
  (sequence "⚑ WAITING(w)" "|")
  (sequence "|" "✘ CANCELED(c)")))
#+END_SRC

Enable org text indenting to match the hierarchical indenting
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Enable word wrapping in org mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

Enable resizing of inline images in org-mode
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

** org-mode epresent customisaitions
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'epresent-mode 'emacs)
  (setq epresent-hide-properties t
        epresent-mode-line nil
        epresent-inline-image-overlays t)
#+END_SRC

* Custom functions
** Kill other buffers
A simple function to kill all buffers except the current one. Ref https://www.emacswiki.org/emacs/KillingBuffers#toc3

#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
